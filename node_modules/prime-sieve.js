module.exports = function primeSieve( limit ){
    var    sqrt = 0|Math.sqrt( limit )
    ,     typed = ( typeof Int8Array !== 'undefined' )
    ,      type = !typed ? Array
        : limit < 1<<8   ? Uint8Array
        : limit < 1<<16  ? Uint16Array
        : limit < 1<<32  ? Uint32Array
        : Float32Array

      , nPrimes = new type( limit+1 )
      ,  primes = new type( limit )
      ,      ix = 1
      ,    gaps = [ 2, 2, 4, 2, 4, 2, 4, 6, 2
                  , 6, 4, 2, 4, 2, 4, 6, 2 ]
      ,   gapIx = 0
      , i, j
      ;
    primes[ 0 ] = 2;

    for( i=3; i<=sqrt; i+=gaps[ gapIx++ ] ){
        ( gapIx === 17 ) && ( gapIx = 9 );
        if( !nPrimes[ i ] ){
            for( j=i*i; j<=limit; j+=i ){
                nPrimes[ j ] = 1;
            }
        }
    }

    for( i=3; i<=limit; i+=2 ){
        if( !nPrimes[ i ] ){ primes[ ix++ ] = i; }
    }

    var output = typed ? [].slice.call( primes.subarray( 0, ix ) ) : primes;
    output.getHash = getHash;

    return output;
};

function getHash(){
  var out = {};
  for( var i=0, l=this.length; i<l; i++ ){
    out[ this[i] ] = 1;
  }

  return out;
}